@model Tuple<Settings, List<Guidelines>, List<Criteria>, List<SubCategory>>
@{
    ViewData["Title"] = "Settings";
    Layout = "_NavChief1";
}

<h1 style="color: #850000; margin: 20px;">SETTINGS <i class="bi bi-gear" style=" color: #850000; font-size: 40px; margin-left: 10px;"></i></h1>
<div class="horizontal-line"></div>
@Html.AntiForgeryToken()

<!--Application Period Switch-->
<div class="application-period d-flex flex-column align-items-center">
    <h2 class="application-title">Application Period</h2>
    <hr />
    <div class="d-flex justify-content-around w-100">
        <div class="app-switch" id="maintenance-section">
            <h5>Under Maintenance</h5>
            <p id="maintenance-description">The application system is currently under maintenance and unavailable.</p>
            <label class="switch">
                <input type="checkbox" id="maintenanceSwitch" onchange="updateSwitchStatus(this, 'maintenance')">
                <span class="slider" id="maintenance-slider">
                    <span class="slider-text" id="maintenance-status"></span>
                </span>
            </label>
        </div>

        <div class="app-switch" id="ufrApp-section">
            <h5>UFR Application</h5>
            <p id="ufrApp-description">The application is currently closed and not accepting submissions.</p>
            <label class="switch">
                <input type="checkbox" id="ufrAppSwitch" onchange="updateSwitchStatus(this, 'ufrApp')">
                <span class="slider" id="ufrApp-slider">
                    <span class="slider-text" id="ufrApp-status"></span>
                </span>
            </label>
        </div>

        <div class="app-switch" id="efrApp-section">
            <h5>EFR Application</h5>
            <p id="efrApp-description">The application is currently closed and not accepting submissions.</p>
            <label class="switch">
                <input type="checkbox" id="efrAppSwitch" onchange="updateSwitchStatus(this, 'efrApp')">
                <span class="slider" id="efrApp-slider">
                    <span class="slider-text" id="efrApp-status"></span>
                </span>
            </label>
        </div>

        <div class="app-switch" id="ufrlApp-section">
            <h5>UFRL Application</h5>
            <p id="ufrlApp-description">The application is currently closed and not accepting submissions.</p>
            <label class="switch">
                <input type="checkbox" id="ufrlAppSwitch" onchange="updateSwitchStatus(this, 'ufrlApp')">
                <span class="slider" id="ufrlApp-slider">
                    <span class="slider-text" id="ufrlApp-status"></span>
                </span>
            </label>
        </div>
    </div>
</div>

<!--Application and Evaluation-->
<div class="application-period d-flex flex-column align-items-center">
    <h2 class="application-title">Application and Evaluation </h2>
    <ol>
        <p><b>NOTE: </b>Please upload the required files for each category:</p>
        <li>
            <b>Memorandums and Executive Orders</b> - Upload the <i>existing or latest version</i> of the memorandum.
        </li>
        <li>
            <b>Documentary Requirements</b> - Upload the <i>necessary requirements needed</i> to apply for funded research work.
        </li>
        <li>
            <b>Evaluation Forms Template (UFR)</b>  - Upload the <i>evaluation forms</i> that will be used by evaluators for assessing proposals.
        </li>
    </ol>
    <hr />
    <div class="d-flex justify-content-around w-100">
        <!-- Managed Memorandums -->
        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>MEMORANDUMS AND EXECUTIVE ORDERS</b></label>
            <div id="uploadFiles" class="mt-2">
                <div id="drop-area">
                    @if (Model.Item2 != null && Model.Item2.Any())
                    {
                        <ul>
                            @foreach (var file in Model.Item2)
                            {
                                if (file.document_Type == "Memorandum")
                                {
                                    <li>
                                        <span>@file.file_Name</span>
                                        <div>
                                            <a href="@Url.Action("PreviewFile", new { id = file.Id })" target="_blank" style="color: blue; margin-right: 10px; font-size: 20px;">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a href="@Url.Action("RemoveFile", new { id = file.Id })" style="color: #850000; font-size: 20px;"
                                               onclick="return confirm('Are you sure you want to remove this file?');">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No file have been uploaded yet.</p>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <div class="input-group mt-3" style="width: 400px;">
                    <input type="file" id="memorandumFile" class="form-control" accept=".pdf" />
                    <button class="preview-btn ms-2" onclick="previewFile('memorandumFile')">
                        Preview
                    </button>
                    <button class="btn btn-primary ms-2" onclick="submitFile('memorandumFile', 'Memorandum')" style="border-radius: 4px;">
                        Submit
                    </button>
                </div>
            </div>
        </div>
        <!-- Generated Documentary Forms -->
        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>DOCUMENTARY REQUIREMENTS</b></label>
            <div class="mt-2">
                <div id="drop-area">
                    @if (Model.Item2 != null && Model.Item2.Any())
                    {
                        <ul>
                            @foreach (var file in Model.Item2)
                            {
                                if (file.document_Type == "DocumentaryForm")
                                {
                                    <li>
                                        <span>@file.file_Name</span>
                                        <div>
                                            <a href="@Url.Action("PreviewFile", new {id = file.Id})" style="color: blue; margin-right: 10px; font-size: 20px;">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; font-size: 20px;"
                                               onclick="return confirm('Are you sure you want to remove this file?');">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No file have been uploaded yet.</p>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <div class="input-group mt-3" style="width: 400px;">
                    <input type="file" id="docuFile" class="form-control" accept=".docx, .pdf" />
                    <button class="preview-btn ms-2" onclick="previewFile('docuFile')">
                        Preview
                    </button>
                    <button class="btn btn-primary ms-2" onclick="submitFile('docuFile', 'DocumentaryForm')" style="border-radius: 4px;">
                        Submit
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Number of Evaluators -->
    <div class="d-flex justify-content-around w-100 mt-4">
        <div class="flex-fill">
            <div class="container-wrapper mb-3">
                <label class="mx-3"><b>NUMBER OF EVALUATORS</b></label>
                <div class="d-flex justify-content-center">
                    <div class="input-group" style="width: 200px; margin-top: 20px;">
                        <input type="number"
                               id="evaluatorCount"
                               class="form-control"
                               min="1"
                               max="10"
                               value="@Model.Item1.evaluatorNum"
                               style="border-radius: 4px;" />
                        <button class="btn btn-primary ms-2"
                                onclick="updateEvaluatorCount()"
                                style="border-radius: 4px;">
                            Save
                        </button>
                    </div>
                </div>
            </div>

            <!-- Number of Evaluation Days -->
            <div class="container-wrapper">
                <label class="mx-3"><b>NUMBER OF EVALUATION DAYS</b></label>
                <div class="d-flex justify-content-center">
                    <div class="input-group" style="width: 200px; margin-top: 20px;">
                        <input type="number"
                               id="evaluationDays"
                               class="form-control"
                               min="1"
                               max="30"
                               value="@Model.Item1.daysEvaluation"
                               style="border-radius: 4px;" />
                        <button class="btn btn-primary ms-2"
                                onclick="updateDaysEvaluation()"
                                style="border-radius: 4px;">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Managed UFR Evaluation Forms -->
        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>EVALUATION FORMS TEMPLATE (UFR)</b></label>
            <div id="uploadFilesUFR" class="mt-2">
                <div id="drop-area">
                    @if (Model.Item2 != null && Model.Item2.Any())
                    {
                        <ul>
                            @foreach (var file in Model.Item2)
                            {
                                if (file.document_Type == "UFREvalsForm")
                                {
                                    <li>
                                        <span>@file.file_Name</span>
                                        <div>
                                            <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: blue; margin-right: 10px; font-size: 20px;">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; font-size: 20px;"
                                               onclick="return confirm('Are you sure you want to remove this file?');">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No file have been uploaded yet.</p>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <div class="input-group mt-3" style="width: 400px;">
                    <input type="file" id="ufrEvaluationFile" class="form-control" accept=".docx, .pdf" />
                    <button class="preview-btn ms-2" onclick="previewFile('ufrEvaluationFile')">Preview</button>
                    <button class="btn btn-primary ms-2" onclick="submitFile('ufrEvaluationFile', 'UFREvalsForm')" style="border-radius: 4px;">Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Progress Report Monitoring-->
<div class="application-period d-flex flex-column align-items-center">
    <h2 class="application-title">Progress Report Monitoring</h2>
    <p class="note"><b>NOTE: </b>Please upload the required file templates for the <i>Progress Report, Terminal Report, and Certificate of Completion Template</i>.</p>
    <hr />
    <div class="d-flex justify-content-around w-100">
        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>PROGRESS REPORT TEMPLATE</b></label>
            <div class="mt-2">
                <div id="drop-area">
                    @if (Model.Item2 != null && Model.Item2.Any())
                    {
                        <ul>
                            @foreach (var file in Model.Item2)
                            {
                                if (file.document_Type == "ProgressReport")
                                {
                                    <li>
                                        <span>@file.file_Name</span>
                                        <div>
                                            <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: blue; margin-right: 10px; font-size: 20px;">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; font-size: 20px;"
                                               onclick="return confirm('Are you sure you want to remove this file?');">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No file have been uploaded yet.</p>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <div class="input-group mt-3" style="width: 400px;">
                    <input type="file" id="progressReport" class="form-control" accept=".docx, .pdf" />
                    <button class="preview-btn ms-2"
                            onclick="previewFile('progressReport')">
                        Preview
                    </button>
                    <button class="btn btn-primary ms-2"
                            onclick="submitFile('progressReport', 'ProgressReport')"
                            style="border-radius: 4px;">
                        Submit
                    </button>
                </div>
            </div>
        </div>

        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>TERMINAL REPORT TEMPLATE</b></label>
            <div class="mt-2">
                <div id="drop-area">
                    @if (Model.Item2 != null && Model.Item2.Any())
                    {
                        <ul>
                            @foreach (var file in Model.Item2)
                            {
                                if (file.document_Type == "TerminalReport")
                                {
                                    <li>
                                        <span>@file.file_Name</span>
                                        <div>
                                            <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: blue; margin-right: 10px; font-size: 20px;">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; font-size: 20px;"
                                               onclick="return confirm('Are you sure you want to remove this file?');">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No file have been uploaded yet.</p>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <div class="input-group mt-3" style="width: 400px;">
                    <input type="file" id="terminalReport" class="form-control" accept=".docx, .pdf" />
                    <button class="preview-btn ms-2"
                            onclick="previewFile('terminalReport')">
                        Preview
                    </button>
                    <button class="btn btn-primary ms-2"
                            onclick="submitFile('terminalReport', 'TerminalReport')"
                            style="border-radius: 4px;">
                        Submit
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="container-wrapper mt-4">
        <label class="mx-3"><b>CERTIFICATE OF COMPLETION TEMPLATE</b></label>
        <div class="mt-2">
            <div id="drop-area">
                @if (Model.Item2 != null && Model.Item2.Any())
                {
                    <ul>
                        @foreach (var file in Model.Item2)
                        {
                            if (file.document_Type == "CertificateCompletion")
                            {
                                <li>
                                    <span>@file.file_Name</span>
                                    <div>
                                        <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: blue; margin-right: 10px; font-size: 20px;">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; font-size: 20px;"
                                           onclick="return confirm('Are you sure you want to remove this file?');">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                }
                else
                {
                    <p>No file have been uploaded yet.</p>
                }
            </div>
        </div>
        <div class="d-flex justify-content-center">
            <div class="input-group mt-3" style="width: 400px;">
                <input type="file" id="certificateCompletion" class="form-control" accept=".docx, .pdf" />
                <button class="preview-btn ms-2"
                        onclick="previewFile('certificateCompletion')">
                    Preview
                </button>
                <button class="btn btn-primary ms-2"
                        onclick="submitFile('certificateCompletion', 'CertificateCompletion')"
                        style="border-radius: 4px;">
                    Submit
                </button>
            </div>
        </div>
    </div>
</div>
<hr />

<!--MANAGE EVALUATION CRITERIA-->
<div class="application-period d-flex flex-column align-items-center">
    <h2 class="application-title">MANAGE EVALUATION CRITERIA</h2>
    <hr />
    <div class="d-flex justify-content-between align-items-start mt-4" style="gap: 10px;">
        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>ADD NEW CRITERIA</b></label>
            <form method="post" action="@Url.Action("AddCriteria", "Chief")">
                <div class="form-group" style="width: 500px;">
                    <label for="criteriaName">Criteria Name</label>
                    <input type="text" class="form-control" id="criteriaName" name="criteriaName" required style="border-radius: 4px;" />
                </div>
                <div class="form-group" style="width: 500px;">
                    <label for="criteriaWeight">Weight (%)</label>
                    <input type="number" class="form-control" id="criteriaWeight" name="criteriaWeight" min="0" max="100" required style="border-radius: 4px;" />
                </div>
                <br />
                <button type="submit" class="btn ms-2" style="border-radius: 4px; background-color: #850000; color: #fff;">Add Criteria</button>
            </form>
        </div>
    </div>

    <div class="horizontal-line"></div>
    <div class="d-flex justify-content-between align-items-start mt-4">
        <div class="flex-fill">
            <h5 class="mx-3"><b>MANAGE EXISTING CRITERIA</b></h5>
            @foreach (var criteria in Model.Item3)
            {
                <div class="criteria d-flex justify-content-between align-items-center">
                    <label class="mx-3"><b>@criteria.Name (Weight: @criteria.Weight%)</b></label>
                    <a href="@Url.Action("RemoveCriteria", "Chief", new {id = criteria.Id})" style="color: #850000; font-size: 20px;"
                       onclick="return confirm('Are you sure you want to remove this sub-category?');"><i class="bi bi-trash"></i></a>
                </div>

                <h6>Sub-Categories: </h6>
                <ul>
                    @foreach (var subcategory in Model.Item4.Where(s => s.CriteriaId == criteria.Id))
                    {
                        <li>
                            [@subcategory.Id] @subcategory.Name (Max Score: @subcategory.MaxScore)
                            <a href="@Url.Action("RemoveSubCategory", "Chief", new {id = subcategory.Id})" style="color: #850000; font-size: 20px;"
                               onclick="return confirm('Are you sure you want to remove this sub-category?');"><i class="bi bi-trash"></i></a>
                        </li>
                    }
                </ul>
                <div class="d-flex justify-content-center mt-10">
                    <label class="mx-3"><b>ADD SUBCATEGORY</b></label>
                    <form method="post" action="@Url.Action("AddSubCategory", "Chief")">
                        <input type="hidden" name="criteriaId" value="@criteria.Id" />
                        <div class="form-group" style="width: 500px;">
                            <label for="subcategoryName">Subcategory Name</label>
                            <input type="text" class="form-control" id="subcategoryName" name="subcategoryName" required style="border-radius: 4px;" />
                        </div>
                        <div class="form-group" style="width: 500px;">
                            <label for="subcategoryMaxScore">Max Score</label>
                            <input type="number" class="form-control" id="subcategoryMaxScore" name="subcategoryMaxScore" min="1" max="10" required style="border-radius: 4px;" />
                        </div>
                        <br />
                        <button type="submit" class="btn ms-2" style="border-radius: 4px; background-color: #850000; color: #fff; float: right;">Add Subcategory</button>
                    </form>
                </div>

                <hr />
            }
        </div>
    </div>
</div>

<!--MANAGE GAWAD Eligibility-->
<div class="application-period d-flex flex-column align-items-center">
    <h2 class="application-title">GAWAD Eligibility</h2>
    <div class="d-flex justify-content-around w-100">
        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>GAWAD Tuklas</b></label>
            <hr />
            <div class="container mt-2">
                <label><b>Nature of Involvement</b></label>
                <div class="involvement-options mt-2">
                    <label>
                        <input type="radio" name="tuklasInvolvement" value="Project Leader"
                            @(Model.Item1.tuklasInvolvement == "Project Leader" ? "checked": "")/>
                        Project Leader Only
                    </label>
                    <br />
                    <label>
                        <input type="radio" name="tuklasInvolvement" value="Project Leader with Co-Proponents"
                            @(Model.Item1.tuklasInvolvement == "Project Leader with Co-Proponents" ? "checked" : "")/>
                        Project Leader with Co-Proponents
                    </label>
                </div>
                <div class="button-container mt-2">
                    <button class="btn2 btn2-update" onclick="updateInvolvementTuklas()">Apply Changes</button>
                </div>
            </div>
            <hr />
            <div class="container mt-2">
                @{
                    var curStudyField = Model.Item1.tuklasFieldOfStudy ?? new List<string>();
                }
                <div id="currentListTuklas">
                    <label><b>Field of Study</b></label>
                    @if (curStudyField.Any())
                    {
                        <ul class="specialization-list">
                            @foreach(var studyfield in curStudyField)
                            {
                                <li class="specialization-item">@studyfield</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Please specify eligible field of study.</p>
                    }
                </div>
                <div id="editFormTuklas" style="display: none;">
                    <ul class="specialization-list">
                        @{
                            var allFields = new[]
                            {
                                "Science",
                                "Social Science",
                                "Business",
                                "Accountancy and Finance",
                                "Computer Science and Information System Technology",
                                "Education",
                                "Engineering, Architecture, Design, and Built Environment",
                                "Humanities, Language, and Communication",
                                "Public Administration, Political Science, and Law"
                            };

                            foreach (var field in allFields)
                            {
                                                        <li class="specialization-item">
                                                            <div class="checkbox-container" style="display: block;">
                                                                <input type="checkbox"
                                                                       id="Tuklas_@field.Replace(" ", "")"
                                                                       value="@field"
                                                                @(curStudyField.Contains(field) ? "checked" : "")>
                                                            </div>
                                                            @field
                                                    </li>
                            }
                        }
                    </ul>
                </div>
                <div class="button-container">
                    <button class="btn2 btn2-edit" id="editBtnTuklas" onclick="toggleEditTuklas()">Edit</button>
                    <button class="btn2 btn2-update" id="updateBtnTuklas" style="display: none;" onclick="updateInterestsTuklas()">Update</button>
                    <button class="btn2 btn2-cancel" id="cancelBtnTuklas" style="display: none;" onclick="cancelEditTuklas()">Cancel</button>
                </div>
            </div>
        </div>
        <div class="flex-fill container-wrapper">
            <label class="mx-3"><b>GAWAD Lathala</b></label>
            <hr />
            <div class="container mt-2">
                <label><b>Nature of Involvement</b></label>
                <div class="involvement-options mt-2">
                    <label>
                        <input type="radio" name="lathalaInvolvement" value="Project Leader"
                            @(Model.Item1.lathalaInvolvement == "Project Leader" ? "checked" : "") />
                        Project Leader Only
                    </label>
                    <br />
                    <label>
                        <input type="radio" name="lathalaInvolvement" value="Project Leader with Co-Proponents"
                            @(Model.Item1.lathalaInvolvement == "Project Leader with Co-Proponents" ? "checked" : "")/>
                        Project Leader with Co-Proponents
                    </label>
                </div>
                <div class="button-container mt-2">
                    <button class="btn2 btn2-update" onclick="updateInvolvementLathala()">Apply Changes</button>
                </div>
            </div>
            <hr />
            <div class="container mt-2">
                @{
                    var curStudyField2 = Model.Item1.lathalaFieldOfStudy ?? new List<string>();
                }
                <div id="currentListLathala">
                    <label><b>Field of Study</b></label>
                    @if (curStudyField2.Any())
                    {
                        <ul class="specialization-list">
                            @foreach(var studyField in curStudyField2)
                            {
                                <li class="specialization-item">@studyField</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Please specify eligible field of study.</p>
                    }
                </div>
                <div id="editFormLathala" style="display: none;">
                    <ul class="specialization-list">
                        @{
                            foreach(var field in allFields)
                            {
                                                    <li class="specialization-item">
                                                        <div class="checkbox-container" style="display: block;">
                                                            <input type="checkbox"
                                                                id="Lathala_@field.Replace(" ", "")"
                                                                value="@field"
                                                                @(curStudyField2.Contains(field) ? "checked" : "")/>
                                                        </div>
                                                        @field
                                                    </li>
                            }
                        }
                    </ul>
                </div>
                <div class="button-container">
                    <button class="btn2 btn2-edit" id="editBtnLathala" onclick="toggleEditLathala()">Edit</button>
                    <button class="btn2 btn2-update" id="updateBtnLathala" style="display: none;" onclick="updateInterestsLathala()">Update</button>
                    <button class="btn2 btn2-cancel" id="cancelBtnLathala" style="display: none;" onclick="cancelEditLathala()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    function updateSwitchStatus(element, switchType) {
        var statusText = document.getElementById(`${switchType}-status`);
        var description = document.getElementById(`${switchType}-description`);
        var slider = document.getElementById(`${switchType}-slider`);
        if (element.checked) {
            statusText.textContent = "ON";
            statusText.style.color = "#fff";
            if (switchType === 'maintenance') {
                description.textContent = "The application system is currently under maintenance and unavailable.";
                slider.style.backgroundColor = "#0D6B4A"; // Dark Red
            } else {
                description.textContent = "The application period is currently open for submissions.";
                slider.style.backgroundColor = "#0D6B4A"; // Green
            }
        } else {
            statusText.textContent = "OFF";
            statusText.style.color = "#fff";

            if (switchType === 'maintenance') {
                description.textContent = "The system is operating normally and is not under maintenance.";
                slider.style.backgroundColor = "#850000"; // Green
            } else {
                description.textContent = "The application is currently closed and not accepting submissions.";
                slider.style.backgroundColor = "#850000"; // Dark Red
            }
        }
    }

    function updateEvaluatorCount() {
        const count = document.getElementById('evaluatorCount').value;

        if (count < 1 || count > 10) {
            alert('Please enter a Number of Evaluator between 1 and 10');
            return;
        }

        if (confirm('Are you sure you want to change the Number of Evaluators in University Funded Research?')) {
            $.ajax({
                url: '@Url.Action("UpdateEvaluatorNum", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    count: count
                },
                success: function (response) {
                    alert('Number of evaluators updated successfully');
                },
                error: function (xhr, status, error) {
                    alert('Error updating number of evaluators. Please try again.');
                }
            });
        } else {
            count = @Model.Item1.evaluatorNum;
        }
    }

    function updateDaysEvaluation() {
        const days = document.getElementById('evaluationDays').value;

        if (days < 1 || days > 30) {
            alert('Please enter a Number of Days between 1 and 30');
            return;
        }

        if (confirm('Are you sure you want to change the Number of Days of Evaluation in University Funded Research?')) {
            $.ajax({
                url: '@Url.Action("UpdateEvaluationDays", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    days: days
                },
                success: function (response) {
                    alert('Number of days updated successfully');
                },
                error: function (xhr, status, error) {
                    alert('Error updating number of days. Please try again.');
                }
            });
        } else {
            count = @Model.Item1.daysEvaluation;
        }
    }

    function previewFile(fileInputId) {
        const fileInput = document.getElementById(fileInputId);
        if (fileInput.files.length === 0) {
            alert('Please select a file to preview.');
            return;
        }

        const file = fileInput.files[0];
        const fileURL = URL.createObjectURL(file);
        const fileExtension = file.name.split('.').pop().toLowerCase();

        if (fileExtension === 'pdf') {
            // If it's a PDF, open in a new tab for preview
            window.open(fileURL, '_blank');
        } else {
            // For other file types, prompt download
            const link = document.createElement('a');
            link.href = fileURL;
            link.download = file.name;
            link.click();
        }
    }

    function submitFile(fileInputId, documentType) {
        const token = $('input[name="__RequestVerificationToken"]').val();
        const fileInput = document.getElementById(fileInputId);
        const file = fileInput.files[0];

        if (!file) {
            alert('Please select a file.');
            return;
        }

        const formData = new FormData();
        formData.append('file', file);
        formData.append('documentType', documentType);

        if (confirm('Are you sure you want to add the file?')) {
            $.ajax({
                url: '@Url.Action("UploadGuidelines", "Chief", new {area = "RemcSys"})',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    // Clear the file input
                    fileInput.value = '';
                    window.location.href = '/RemcSys/Chief/Settings';
                },
                error: function (xhr, status, error) {
                    alert('Error uploading file. Please try again.');
                }
            });
        }
        else {
            return;
        }
    }
</script>

<script>
    const maintenanceSwitch = document.getElementById('maintenanceSwitch');
    const maintenanceStatus = document.getElementById('maintenance-status');
    const maintenanceSlider = document.getElementById('maintenance-slider');

    const ufrAppSwitch = document.getElementById('ufrAppSwitch');
    const ufrAppStatus = document.getElementById('ufrApp-status');
    const ufrAppSlider = document.getElementById('ufrApp-slider');

    const efrAppSwitch = document.getElementById('efrAppSwitch');
    const efrAppStatus = document.getElementById('efrApp-status');
    const efrAppSlider = document.getElementById('efrApp-slider');

    const ufrlAppSwitch = document.getElementById('ufrlAppSwitch');
    const ufrlAppStatus = document.getElementById('ufrlApp-status');
    const ufrlAppSlider = document.getElementById('ufrlApp-slider');

    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    maintenanceSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to put in Maintenance Mode the system?' :
            'Are you sure you want to turn off the Maintenance Mode in the system?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateMaintenanceMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isMaintenanceMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    maintenanceStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'maintenance');
        }
    });

    ufrAppSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to open the application for University Funded Research?' :
            'Are you sure you want to close the application for University Funded Research?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateUFRMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isUFRMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    ufrAppStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'ufrApp');
        }
    });

    efrAppSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to open the application for Externally Funded Research?' :
            'Are you sure you want to close the application for Externally Funded Research?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateEFRMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isEFRMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    efrAppStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'efrApp');
        }
    });

    ufrlAppSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to open the application for University Funded Research Load?' :
            'Are you sure you want to close the application for University Funded Research Load?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateUFRLMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isUFRLMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    ufrlAppStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'ufrlApp');
        }
    });

    window.addEventListener('load', function () {
        const initialState = @Json.Serialize(Model.Item1.isMaintenance);
        maintenanceSwitch.checked = initialState;
        maintenanceStatus.textContent = initialState ? 'ON' : 'OFF';
        maintenanceStatus.style.color = initialState ? '#fff' : '#fff';
        maintenanceSlider.style.backgroundColor = initialState ? '#0D6B4A' : '#850000';

        const ufrInitialState = @Json.Serialize(Model.Item1.isUFRApplication);
        ufrAppSwitch.checked = ufrInitialState;
        ufrAppStatus.textContent = ufrInitialState ? 'ON' : 'OFF';
        ufrAppStatus.style.color = ufrInitialState ? '#fff' : '#fff';
        ufrAppSlider.style.backgroundColor = ufrInitialState ? '#0D6B4A' : '#850000';

        const efrInitialState = @Json.Serialize(Model.Item1.isEFRApplication);
        efrAppSwitch.checked = efrInitialState;
        efrAppStatus.textContent = efrInitialState ? 'ON' : 'OFF';
        efrAppStatus.style.color = efrInitialState ? '#fff' : '#fff';
        efrAppSlider.style.backgroundColor = efrInitialState ? '#0D6B4A' : '#850000';

        const ufrlInitialState = @Json.Serialize(Model.Item1.isUFRLApplication);
        ufrlAppSwitch.checked = ufrlInitialState;
        ufrlAppStatus.textContent = ufrlInitialState ? 'ON' : 'OFF';
        ufrlAppStatus.style.color = ufrlInitialState ? '#fff' : '#fff';
        ufrlAppSlider.style.backgroundColor = ufrlInitialState ? '#0D6B4A' : '#850000';


        const initialEvaluatorCount = @Json.Serialize(Model.Item1.evaluatorNum);
        document.getElementById('evaluatorCount').value = initialEvaluatorCount;

        const initialEvaluationDays = @Json.Serialize(Model.Item1.daysEvaluation);
        document.getElementById('evaluationDays').value = initialEvaluationDays;
    });

    // Functions for GAWAD Tuklas
    function toggleEditTuklas() {
        document.getElementById('currentListTuklas').style.display = 'none';
        document.getElementById('editFormTuklas').style.display = 'block';
        document.getElementById('editBtnTuklas').style.display = 'none';
        document.getElementById('updateBtnTuklas').style.display = 'inline-block';
        document.getElementById('cancelBtnTuklas').style.display = 'inline-block';
    }

    function cancelEditTuklas() {
        document.getElementById('currentListTuklas').style.display = 'block';
        document.getElementById('editFormTuklas').style.display = 'none';
        document.getElementById('editBtnTuklas').style.display = 'inline-block';
        document.getElementById('updateBtnTuklas').style.display = 'none';
        document.getElementById('cancelBtnTuklas').style.display = 'none';
    }

    function updateInterestsTuklas() {
        updateInterests('Tuklas', '/RemcSys/Chief/UpdateTuklasStudyField');
    }

    function toggleEditLathala(){
        document.getElementById('currentListLathala').style.display = 'none';
        document.getElementById('editFormLathala').style.display = 'block';
        document.getElementById('editBtnLathala').style.display = 'none';
        document.getElementById('updateBtnLathala').style.display = 'inline-block';
        document.getElementById('cancelBtnLathala').style.display = 'inline-block';
    }

    function cancelEditLathala() {
        document.getElementById('currentListLathala').style.display = 'block';
        document.getElementById('editFormLathala').style.display = 'none';
        document.getElementById('editBtnLathala').style.display = 'inline-block';
        document.getElementById('updateBtnLathala').style.display = 'none';
        document.getElementById('cancelBtnLathala').style.display = 'none';
    }

    function updateInterestsLathala(){
        updateInterests('Lathala', '/RemcSys/Chief/UpdateLathalaStudyField');
    }

    // Generic update function
    function updateInterests(prefix, url) {
        const checkboxes = document.querySelectorAll(`#editForm${prefix} input[type="checkbox"]`);
        const selectedInterests = [];

        checkboxes.forEach((checkbox) => {
            if (checkbox.checked) {
                selectedInterests.push(checkbox.value);
            }
        });

        const formData = new FormData();
        selectedInterests.forEach(interest => formData.append('field_of_Interest', interest));

        fetch(url, {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating study field');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating study field');
            });
    }

    function updateInvolvementTuklas() {
        updateInvolvement('Tuklas', '/RemcSys/Chief/UpdateTuklasInvolvement');
    }

    function updateInvolvementLathala(){
        updateInvolvement('Lathala', '/RemcSys/Chief/UpdateLathalaInvolvement');
    }

    function updateInvolvement(prefix, url) {
        const selectedOption = document.querySelector(`input[name="${prefix.toLowerCase()}Involvement"]:checked`).value;

        if (!confirm(`You selected: ${selectedOption} for GAWAD ${prefix}. Do you want to save these changes?`)) {
            return;
        }

        const formData = new FormData();
        formData.append('Involvement', selectedOption);

        fetch(url, {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating nature of involvement');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating natur of involvement');
            });
    }
</script>
<style>
    /* List styling */
    .specialization-list {
        list-style: none;
        padding: 0;
    }

    .specialization-item {
        padding: 8px 12px;
        border-bottom: 1px solid #eee;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .specialization-item:last-child {
            border-bottom: none;
        }

    .nature-list {
        list-style: none;
        padding: 0;
    }

    .nature-item {
        padding: 8px 12px;
        border-bottom: 1px solid #eee;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .nature-item:last-child {
            border-bottom: none;
        }

    /* Buttons */
    .button-container {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .btn2 {
        padding: 8px 16px;
        font-size: 0.9rem;
        font-weight: 600;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn2-edit {
        background-color: #007bff;
        color: white;
    }

        .btn2-edit:hover {
            background-color: #0056b3;
        }

    .btn2-update {
        background-color: #28a745;
        color: white;
    }

        .btn2-update:hover {
            background-color: #218838;
        }

    .btn2-cancel {
        background-color: #dc3545;
        color: white;
    }

        .btn2-cancel:hover {
            background-color: #c82333;
        }

    /* Checkboxes */
    .checkbox-container {
        display: flex;
        align-items: center;
    }

    input[type="checkbox"] {
        margin-right: 10px;
        width: 16px;
        height: 16px;
    }

    /* Text for empty specialization */
    p {
        color: #777;
        font-style: italic;
        margin: 0;
    }
</style>