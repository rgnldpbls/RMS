@using System.Security.Claims
@model rscSys_final.Models.DisapprovalViewModel

@{
    ViewData["Title"] = "Disapproval Letter";
    Layout = "_LayoutCPages";
}

<style>

    .deets-title h1 {
        font-weight: 800;
    }

    .tablehead th {
        background-color: #850000;
        color: white;
        font-weight: 700;
    }

    .upload-btn {
        border: 2px solid #850000;
        color: #850000;
    }

    .uploaded-document {
        background-color: #dc3545;
        color: white;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
    }

    .open-file {
        text-decoration: none;
        color: white;
    }
</style>

<div class="container mt-2">
    <div class="d-flex justify-content-between align-items-center mb-2 deets-title">
        <h1>Disapprove</h1>
        <div>
            <button class="btn btn-outline-danger" onclick="window.history.back();">Back</button>
        </div>
    </div>

    <div class="card mb-2">
        <div class="card-body">
            <p class="mb-1"><strong>DTS Number:</strong> @Model.Request.DtsNo</p>
            <p class="mb-1"><strong>Application Type:</strong> @Model.Request.ApplicationType</p>
            <p class="mb-1"><strong>Field of Study:</strong> @Model.Request.FieldOfStudy</p>
            <p class="mb-0"><strong>Applicant Name:</strong> @Model.Request.Name</p>
        </div>
    </div>

    <div class="card mb-2 evaldeets">
        <div class="card-header bg-light">
            <h5 class="mb-0">Upload Disapproval Letter</h5>
        </div>
        <div class="card-body">
            <div id="uploadedFilesContainer">
                @if (Model.FinalDocuments != null && Model.FinalDocuments.Any())
                {
                    foreach (var document in Model.FinalDocuments)
                    {
                        <div class="d-flex align-items-center bg-danger text-white p-2 mb-2 rounded">
                            <a href="@Url.Action("DownloadFinalDocument", "RSCChief", new { id = document.FinalDocuID })" target="_blank" class="open-file">
                                <i class="fas fa-file-pdf ms-3 me-2"></i>
                                <span>@document.FinalDocuName</span>
                            </a>
                            <form id="deleteFileForm-@document.FinalDocuID" method="post" class="ms-auto">
                                <input type="hidden" name="finaldocuId" value="@document.FinalDocuID" />
                                <button class="btn" type="button" onclick="deleteFile(@document.FinalDocuID)">
                                    <i class="fa-solid fa-xmark" style="color: #ffffff;"></i>
                                </button>
                            </form>
                        </div>
                    }
                }
                else
                {
                    <p>No documents uploaded for this request.</p>
                }
            </div>

            <form id="uploadForm" method="post" enctype="multipart/form-data" action="@Url.Action("UploadFinalDocu", "RSCChief")">
                <input type="hidden" name="requestId" value="@Model.Request.RequestId" />
                <input type="file" name="disapprovalLetter" id="fileInput" class="d-none" required />
                <button type="button" class="btn upload-btn w-100" onclick="document.getElementById('fileInput').click();">
                    <i class="fas fa-upload me-2"></i> Upload Disapproval Letter
                </button>
            </form>
        </div>
    </div>

    <div class="card mb-2">
        <div class="card-header">
            <h6 class="mb-0">Message:</h6>
        </div>
        <form asp-action="SendDisapprovalLetter" method="post" id="disapprovalForm">
            <div class="card-body">
                <textarea id="automatedMessage" class="form-control mb-3" rows="4" placeholder="Type here your comments and suggestions." name="comments"></textarea>

                <input type="hidden" name="Request.UserId" value="@Model.Request.UserId" />
                <input type="hidden" name="Request.DtsNo" value="@Model.Request.DtsNo" />
                <input type="hidden" name="Request.RequestId" value="@Model.Request.RequestId" />

                <button type="submit" class="btn btn-primary float-end mb-3">Send Disapproval Letter</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Populate the message box with an automated message for disapproval
        const dtsno = '@Model.Request.DtsNo'; // Get DTS number from the model
        const automatedMessage = `We regret to inform you that your application request with DTS No. ${dtsno} has not met the necessary criteria for approval.`;

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("automatedMessage").value = automatedMessage; // Set the default message
        });

        // Initialize Swal Toast for success notification
        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.onmouseenter = Swal.stopTimer;
                toast.onmouseleave = Swal.resumeTimer;
            }
        });

        // Handle file upload for disapproval letter
        document.getElementById("fileInput").addEventListener("change", function () {
            const formData = new FormData(document.getElementById("uploadForm"));

            $.ajax({
                url: '@Url.Action("UploadDisapprovalLetter", "RSCChief")', // Adjust action URL for disapproval letter
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        Toast.fire({
                            icon: "success",
                            title: "File uploaded successfully"
                        });

                        setTimeout(() => location.reload(), 3000); // Refresh the page
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Upload failed",
                            text: response.message || "An error occurred while uploading the file."
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: "error",
                        title: "Upload failed",
                        text: "There was an error processing your request."
                    });
                }
            });
        });
        </script>
        
        <script>
        // Delete file logic
        function deleteFile(finaldocuId) {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: "btn btn-success",
                    cancelButton: "btn btn-danger me-2"
                },
                buttonsStyling: false
            });

            swalWithBootstrapButtons.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteDisapprovalLetter", "RSCChief")', // Adjust action URL for deleting disapproval letter
                        type: 'POST',
                        data: { finaldocuId: finaldocuId },
                        success: function (response) {
                            if (response.success) {
                                swalWithBootstrapButtons.fire({
                                    title: "Deleted!",
                                    text: "Your file has been deleted.",
                                    icon: "success"
                                }).then(() => location.reload());
                            } else {
                                swalWithBootstrapButtons.fire({
                                    title: "Error!",
                                    text: "There was an issue deleting the file.",
                                    icon: "error"
                                });
                            }
                        },
                        error: function () {
                            swalWithBootstrapButtons.fire({
                                title: "Error!",
                                text: "There was an error processing your request.",
                                icon: "error"
                            });
                        }
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithBootstrapButtons.fire({
                        title: "Cancelled",
                        text: "Your file is safe :)",
                        icon: "error"
                    });
                }
            });
        }
        </script>

        <script>
        // Handle form submission for disapproval
        $(document).ready(function () {
            $('#disapprovalForm').on('submit', function (event) {
                event.preventDefault(); // Prevent default submission

                let timerInterval;

                Swal.fire({
                    title: "Processing...",
                    html: "Please wait while we process the disapproval letter.",
                    timerProgressBar: true,
                    didOpen: () => {
                        Swal.showLoading();
                        timerInterval = setInterval(() => {
                            const timer = Swal.getPopup().querySelector("b");
                            if (timer) {
                                timer.textContent = Swal.getTimerLeft();
                            }
                        }, 100);
                    },
                    willClose: () => {
                        clearInterval(timerInterval);
                    }
                });

                $.ajax({
                    url: $(this).attr('action'), // Use form action attribute
                    type: $(this).attr('method'), // Use form method attribute
                    data: $(this).serialize(), // Serialize form data
                    success: function (response) {
                        Swal.close(); // Close loading indicator

                            // Show success message
                                Swal.fire({
                        icon: 'success',
                        title: 'Disapproval Letter Sent',
                        text: 'The disapproval letter was sent successfully!',
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Redirect to the Applications page after user clicks "OK"
                                window.location.href = '@Url.Action("Applications", "RSCChief")';
                            }
                    });
                },
                    error: function (error) {
                        // Close the SweetAlert loading indicator
                        Swal.close();

                        // Show error message
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'There was an error sending the disapproval letter. Please try again.'
                        });
                    }
                });
            });
        });
    </script>


}