@model ResearchManagementSystem.Areas.CreSys.ViewModels.AssignEvaluatorsViewModel

@{
    ViewData["Title"] = "Assign Evaluators";
    // Determine if elements should be hidden based on the provided conditions
    bool shouldHideElements = (Model.EthicsApplication?.InitialReview != null &&
        ((Model.EthicsApplication.InitialReview.ReviewType == "Expedited" &&
          (Model.EthicsApplication.EthicsEvaluation?.Count >= 2 && Model.EthicsApplication.EthicsEvaluation?.Count <= 3)) ||
         (Model.EthicsApplication.InitialReview.ReviewType == "Full Review" &&
          Model.EthicsApplication.EthicsEvaluation?.Count == 3)));
}
<head>
    <link rel="stylesheet" href="~/css/AssignEval.css" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css" asp-append-version="true" />
</head>

<div class="header-container">
    <h2>Assign Evaluators</h2>
    <button class="btn-back" onclick="goBack()">Back</button>
</div>

<div class="card border-light mb-3" style="width:contain">
    <div class="card-header">
        <div class="row">
            <div class="col text-start">
                <p id="urecNoText">
                    <strong>UREC No.: </strong> @Model.EthicsApplication.UrecNo
                </p>
                <button id="copybut" type="button" class="btn-outline-transparent btn-sm ms-2" onclick="copyUrecNo()">
                    <i class="fas fa-copy"></i>
                </button>
            </div>
            <!--DTS-->
            <div class="col text-end">
                <p id="dtsNoText">
                    <strong>DTS No.:</strong>
                </p>

                <!-- Button to Copy DTS No. if it exists -->
                @if (!string.IsNullOrEmpty(Model.EthicsApplication.DtsNo))
                {
                    <button id="copybut" type="button" class="btn-outline-transparent btn-sm ms-2" onclick="copyDtsNo()">
                        <i class="fas fa-copy"></i>
                    </button>
                }
            </div>
        </div>
        <div class="row">
            <h4><strong>Research Title:</strong>@Model.NonFundedResearchInfo.Title</h4>
            <p>
                <div class="row">
                    <div class="col-md-6">
                        <strong>Proponent/s:</strong>
                    </div>
                    <div class="col">
                        @Model.NonFundedResearchInfo.Name
                        <br />
                        @if (Model.NonFundedResearchInfo.CoProponents != null && Model.NonFundedResearchInfo.CoProponents.Any())
                        {
                            foreach (var proponent in Model.NonFundedResearchInfo.CoProponents)
                            {
                                @proponent.CoProponentName <br />
                            }
                        }
                    </div>
                </div>
            </p>
            <p><strong>Field of Study:</strong> @Model.EthicsApplication.FieldOfStudy</p>
        </div>

    </div>

    <div class="card-body">
        <h4 id="appDetails">Application Forms</h4>
        <hr />
        <div class="row">
            <div class="col-sm">
                @if (Model.ReceiptInfo != null && Model.ReceiptInfo.ScanReceipt != null)
                {
                    <div class="mb-3">
                        <label><strong>Receipt:</strong></label>
                        <button id="red-background" class="" onclick="openPdfInModal('@Url.Action("ViewReceipt", "Researcher", new { urecNo = Model.EthicsApplication?.UrecNo })')">
                            <i class="fas fa-file-pdf text-white"></i>View Receipt (PDF)
                        </button>
                    </div>
                }

                @if (Model.EthicsApplicationForms != null && Model.EthicsApplicationForms.Any())
                {
                    <ul class="list-unstyled">
                        @foreach (var form in Model.EthicsApplicationForms)
                        {
                            <li class="list-group-item red-background">
                                <button id="red-background" class="" onclick="openPdfInModal('@Url.Action("ViewFile", "Researcher", new { formid = form.EthicsFormId, urecNo = Model.EthicsApplication.UrecNo })')">
                                    <i class="fas fa-file-pdf text-white"></i> @form.FileName
                                </button>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No forms submitted.</p>
                }
            </div>
            <div class="col-sm">
                <div id="assignedEvaluators" class="mt-4">
                    <h6>Assigned Evaluators:</h6>
                    <ul id="assignedEvaluatorsList">
                        @foreach (var evaluator in Model.PendingEvaluators.Concat(Model.AcceptedEvaluators))
                        {
                            <li>@($"{evaluator.Name} - {(Model.PendingEvaluators.Contains(evaluator) ? "Pending" : "Accepted")}")</li>
                        }
                    </ul>
                </div>

                <!-- Display Evaluated Evaluators -->
                <div id="evaluatedEvaluators" class="mt-4">
                    <h6>Evaluated Evaluators:</h6>
                    <ul id="evaluatedEvaluatorsList">
                        @foreach (var evaluator in Model.EvaluatedEvaluators)
                        {
                            <li>@($"{evaluator.Name} - Evaluated")</li>
                        }
                    </ul>
                </div>

                <!-- Only show the selected evaluators and button if shouldHideElements is false -->
                @if (!shouldHideElements)
                {
                    <div id="selectedEvaluators" class="mt-4">
                        <h6>Selected Evaluators:</h6>
                        <ul id="selectedEvaluatorsList"></ul>
                    </div>
                    <button type="button" id="assignButton" class="" data-bs-toggle="modal" data-bs-target="#assignEvaluatorsModal">
                        Assign Evaluators
                    </button>
                }
            </div>
            <form id="evaluatorForm" asp-action="AssignEvaluators" method="post" class="mt-4">
                <input type="hidden" name="urecNo" value="@Model.EthicsApplication.UrecNo" />
                <input type="hidden" id="reviewType" value="@Model.EthicsApplication.InitialReview.ReviewType" />

                <div class="modal fade" id="assignEvaluatorsModal" tabindex="-1" aria-labelledby="assignEvaluatorsModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg" style=" max-width: 80%; width: 80%; height: 80vh;">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="assignEvaluatorsModalLabel">Assign Evaluators</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                                <div class="container">
                                    <div id="warningMessage" class="alert alert-warning d-none" role="alert"></div>

                                    <!-- Already Assigned Evaluators Section (Pending + Accepted) -->
                                    <h6>Assigned Evaluators:</h6>
                                    <div id="assignedEvaluators" class="mt-4">
                                        <ul id="assignedEvaluatorsList">
                                            @foreach (var evaluator in Model.PendingEvaluators)
                                            {
                                                <li>@($"{evaluator.Name} - Pending")</li>
                                            }
                                            @foreach (var evaluator in Model.AcceptedEvaluators)
                                            {
                                                <li>@($"{evaluator.Name} - Accepted")</li>
                                            }
                                        </ul>
                                    </div>

                                    <!-- Evaluated Evaluators Section -->
                                    <h6>Evaluated Evaluators:</h6>
                                    <div id="evaluatedEvaluators" class="mt-4">
                                        <ul id="evaluatedEvaluatorsList">
                                            @foreach (var evaluator in Model.EvaluatedEvaluators)
                                            {
                                                <li>@($"{evaluator.Name} - Evaluated")</li>
                                            }
                                        </ul>
                                    </div>
                                    <h6>Recommended Evaluators (Least Pending and Aligned Expertise)</h6>
                                    <div class="row g-3 mb-2">
                                        @foreach (var evaluator in Model.RecommendedEvaluators)
                                        {
                                            <div class="col-md-4 mb-3 d-flex justify-content-center">
                                                <!-- Center the column -->
                                                <div class="bg-success p-2 rounded w-100">
                                                    <!-- Added padding and width control -->
                                                    <div class="form-check d-flex align-items-center justify-content-start">
                                                        <!-- Flexbox for form-check -->
                                                        <input class="form-check-input evaluator-checkbox" type="checkbox"
                                                               name="selectedEvaluatorIds"
                                                               value="@evaluator.EthicsEvaluatorId"
                                                               data-name="@evaluator.Name" />
                                                        <label class="form-check-label ms-2">
                                                            <!-- Added margin to label -->
                                                            @evaluator.Name
                                                        </label>
                                                        <div class="ms-2">
                                                            <!-- Added margin to the right for the pending text -->
                                                            <p class="mb-0"><strong>Pending:</strong> @evaluator.Pending</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>


                                    <!-- All Available Evaluators Section -->
                                    <h6>All Available Evaluators</h6>
                                    <div class="row g-3 mb-2">
                                        @foreach (var evaluator in Model.AllAvailableEvaluators
                                        .Where(e => !Model.RecommendedEvaluators.Any(re => re.EthicsEvaluatorId == e.EthicsEvaluatorId) &&
                                        !Model.EvaluatedEvaluators.Any(ee => ee.EthicsEvaluatorId == e.EthicsEvaluatorId) &&
                                        !Model.PendingEvaluators.Any(pe => pe.EthicsEvaluatorId == e.EthicsEvaluatorId) &&
                                        !Model.AcceptedEvaluators.Any(ace => ace.EthicsEvaluatorId == e.EthicsEvaluatorId)))
                                        {
                                            <div class="col-md-4 mb-3 d-flex justify-content-center">
                                                <!-- Center the column -->
                                                <div class="bg-warning p-2 rounded w-100">
                                                    <!-- Added yellow background (bg-warning) and padding -->
                                                    <div class="form-check d-flex align-items-center justify-content-start">
                                                        <!-- Flexbox for form-check -->
                                                        <input class="form-check-input evaluator-checkbox" type="checkbox"
                                                               name="selectedEvaluatorIds"
                                                               value="@evaluator.EthicsEvaluatorId"
                                                               data-name="@evaluator.Name" />
                                                        <label class="form-check-label ms-2">
                                                            <!-- Added margin to label -->
                                                            @evaluator.Name
                                                        </label>
                                                        <div class="ms-2">
                                                            <!-- Added margin to the right for the pending text -->
                                                            <p class="mb-0"><strong>Pending:</strong> @evaluator.Pending</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-primary"
                                @(Model.PendingEvaluators.Count + Model.AcceptedEvaluators.Count + Model.EvaluatedEvaluators.Count >= 3 ? "disabled" : "")>
                                    Assign Selected Evaluators
                                </button>
                                <div id="warningMessage" class="alert alert-warning @(Model.PendingEvaluators.Count + Model.AcceptedEvaluators.Count + Model.EvaluatedEvaluators.Count >= 3 ? "" : "d-none")" role="alert">
                                    The maximum number of evaluators has been assigned for this review.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const reviewType = document.getElementById('reviewType').value;
        const evaluatorCheckboxes = document.querySelectorAll('.evaluator-checkbox');
        const selectedEvaluatorsList = document.getElementById('selectedEvaluatorsList');
        const warningMessage = document.getElementById('warningMessage');
        const assignButton = document.getElementById('assignButton');

        evaluatorCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                // Update the selected evaluators and check submit button state
                updateSelectedEvaluators();
                checkSubmitButtonState();
            });
        });

        function updateSelectedEvaluators() {
            selectedEvaluatorsList.innerHTML = ''; // Clear the list

            evaluatorCheckboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    const name = checkbox.getAttribute('data-name');
                    const listItem = document.createElement('li');
                    listItem.textContent = name;

                    const removeButton = document.createElement('button');
                    removeButton.textContent = 'Remove';
                    removeButton.classList.add('btn', 'btn-danger', 'btn-sm', 'ms-2');
                    removeButton.onclick = function () {
                        checkbox.checked = false; // Uncheck the checkbox
                        updateSelectedEvaluators(); // Update the list
                        checkSubmitButtonState(); // Check the button state
                    };

                    listItem.appendChild(removeButton);
                    selectedEvaluatorsList.appendChild(listItem);
                }
            });
        }

        function checkSubmitButtonState() {
            const maxAssignments = 3; // Set the maximum limit for evaluators

            // Count of Pending, Accepted, and Evaluated evaluators
            const alreadyAssignedCount = @Model.PendingEvaluators.Count + @Model.AcceptedEvaluators.Count + @Model.EvaluatedEvaluators.Count;

            // Count of selected evaluators from checkboxes
            const selectedCount = Array.from(evaluatorCheckboxes).filter(checkbox => checkbox.checked).length;

            // Total count: already assigned + newly selected
            const totalSelectedCount = alreadyAssignedCount + selectedCount;

            // Clear previous warning message
            warningMessage.classList.add('d-none'); // Hide warning message by default
            evaluatorCheckboxes.forEach(checkbox => checkbox.disabled = false); // Re-enable all checkboxes

            // Show warning if maximum is reached
            if (totalSelectedCount >= maxAssignments) {
                evaluatorCheckboxes.forEach(checkbox => {
                    if (!checkbox.checked) {
                        checkbox.disabled = true; // Disable unchecked checkboxes
                    }
                });
                showWarning(You have reached the maximum of 3 evaluator assignments.);
                assignButton.disabled = true; // Disable the submit button if limit is reached
            } else {
                assignButton.disabled = false; // Enable the submit button if under the limit
            }
        }

        function showWarning(message) {
            warningMessage.textContent = message; // Set warning message text
            warningMessage.classList.remove('d-none'); // Show warning message
        }

        function copyUrecNo() {
            const urecNoText = document.getElementById("urecNoText").innerText;
            navigator.clipboard.writeText(urecNoText.replace("UREC No.: ", "")).then(function () {
                alert('UREC No. copied to clipboard!');
            }, function (err) {
                console.error('Could not copy text: ', err);
            });
        }

        function copyDtsNo() {
            const dtsNoText = document.getElementById("dtsNoText").innerText;
            navigator.clipboard.writeText(dtsNoText.replace("DTS No.: ", "")).then(function () {
                alert('DTS No. copied to clipboard!');
            }, function (err) {
                console.error('Could not copy text: ', err);
            });
        }

        function goBack() {
            window.history.back();
        }

        function openPdfInModal(pdfUrl) {
            // Set the iframe source to the selected PDF
            document.getElementById("pdfViewer").src = pdfUrl;

            // Show the modal
            $('#pdfModal').modal('show');
        }
    </script>
}