@model ResearchManagementSystem.Areas.CreSys.ViewModels.ReportGenerationViewModel

@{
    ViewData["Title"] = "Report Generation";
}

<head>
    <link rel="stylesheet" href="~/css/InitialReview.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css" asp-append-version="true" />
</head>

<div class="container">
    <h2>Generate Report</h2>
    <form id="reportForm" method="post" asp-controller="Chief" asp-action="GenerateReportDirectorFilter">

        <!-- Researcher Type Dropdown -->
        <div class="form-group">
            <label for="ResearcherType">Researcher Type</label>
            @Html.DropDownListFor(model => model.ReaserchType, 
                new SelectList(new List<string> {"All Researcher", "External Researcher", "Internal Researcher" },
                     Model.ReaserchType ?? "All Researcher"),
                new { @class = "form-control", id = "ResearcherType", @required = "required" })
            @Html.ValidationMessageFor(model => model.ReaserchType, "", new { @class = "text-danger" })
        </div>

        <!-- Internal Researcher Type Dropdown -->
        <div class="form-group" id="InternalResearcherContainer" style="display:none;">
            <label for="InternalResearcherType">Internal Researcher Type</label>
            @Html.DropDownListFor(
                     model => model.InternalResearcherType,
                     new SelectList(
                     new[] {
            new SelectListItem { Text = "Select Internal Researcher Type", Value = "", Disabled = true, Selected = Model.InternalResearcherType == null }
            }
                     .Concat(new List<string> { "All Internal Researcher", "Student", "Faculty" }
                     .Select(type => new SelectListItem { Text = type, Value = type })),
                     "Value", "Text", Model.InternalResearcherType),
                     new { @class = "form-control", id = "InternalResearcherType", @required = "required" }
                     )
            @Html.ValidationMessageFor(model => model.InternalResearcherType, "", new { @class = "text-danger" })
        </div>


        <!-- Campus Dropdown -->
        <div class="form-group" id="CampusDropdownContainer">
            <label for="SelectedCampus">Campus</label>
            @Html.DropDownListFor(
                     model => model.SelectedCampus,
                     new SelectList(
                     new[] {
            new SelectListItem { Text = "Select Campus", Value = "", Disabled = true, Selected = Model.SelectedCampus == null }
            }
                     .Concat(Model.Campuses.Select(c => new SelectListItem { Text = c, Value = c }))
                     , "Value", "Text", Model.SelectedCampus),
                     new { @class = "form-control", id = "CampusDropdown", @required = "required" }
                     )
            @Html.ValidationMessageFor(model => model.SelectedCampus, "", new { @class = "text-danger" })
        </div>


        <div class="form-group" id="CollegeDropdownContainer">
            <label for="SelectedCollege">College</label>
            @Html.DropDownListFor(
                     model => model.SelectedCollege,
                     new SelectList(
                     new[] {
            new SelectListItem { Text = "Select College", Value = "", Disabled = true, Selected = Model.SelectedCollege == null }
            }
                     .Concat(Model.Colleges.Select(c => new SelectListItem { Text = c, Value = c }))
                     , "Value", "Text", Model.SelectedCollege),
                     new { @class = "form-control", id = "CollegeDropdown", @required = "required" }
                     )
            @Html.ValidationMessageFor(model => model.SelectedCollege, "", new { @class = "text-danger" })
        </div>



        <!-- Field of Study Dropdown -->
        <div class="form-group">
            <label for="SelectedFieldOfStudy">Field of Study</label>
            @Html.DropDownListFor(model => model.SelectedFieldOfStudy,
                     new SelectList(Model.FieldsOfStudy, "Select Field of Study"),
                     new { @class = "form-control", @required = "required", placeholder = "Select Field of Study" })
            @Html.ValidationMessageFor(model => model.SelectedFieldOfStudy, "", new { @class = "text-danger" })
        </div>

        <!-- Date Range -->
        <div class="form-group">
            <label for="StartDate">Start Date</label>
            <input type="date" id="StartDate" name="StartDate" class="form-control" value="@Model.StartDate?.ToString("yyyy-MM-dd")" required />
        </div>
        <div class="form-group">
            <label for="EndDate">End Date</label>
            <input type="date" id="EndDate" name="EndDate" class="form-control" value="@Model.EndDate?.ToString("yyyy-MM-dd")" required />
        </div>

        <!-- Validation Message -->
        <div id="dateValidationMessage" class="text-danger" style="display: none;">
            Start date cannot be later than the end date.
        </div>

        <button type="submit" class="btn btn-primary">Generate Report</button>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
    const researcherTypeDropdown = document.getElementById("ResearcherType");
    const internalResearcherContainer = document.getElementById("InternalResearcherContainer");
    const campusDropdown = document.getElementById("CampusDropdown");
    const campusDropdownContainer = document.getElementById("CampusDropdownContainer");
    const collegeDropdownContainer = document.getElementById("CollegeDropdownContainer");

    // Toggle visibility based on Researcher Type selection (Internal/External)
    function toggleInternalResearcherFields() {
        const researcherType = researcherTypeDropdown.value;
        if (researcherType === "Internal Researcher") {
            internalResearcherContainer.style.display = "block";
        } else {
            internalResearcherContainer.style.display = "none";
        }
    }

    // Toggle campus/college visibility based on the researcher type
    function toggleCampusAndCollegeVisibility() {
        const researcherType = researcherTypeDropdown.value;
        if (researcherType === "External Researcher" || researcherType === "All Researcher") {
            campusDropdownContainer.style.display = "none";
            collegeDropdownContainer.style.display = "none";
        } else {
            campusDropdownContainer.style.display = "block";
            // Check if the selected campus is "Sta. Mesa (MAIN CAMPUS)"
            if (campusDropdown.value === "Sta. Mesa (MAIN CAMPUS)") {
                collegeDropdownContainer.style.display = "block";
            } else {
                collegeDropdownContainer.style.display = "none";
            }
        }
    }

    // Initialize visibility based on default selection
    toggleInternalResearcherFields();
    toggleCampusAndCollegeVisibility();

    // Event listeners
    researcherTypeDropdown.addEventListener("change", function () {
        toggleInternalResearcherFields();
        toggleCampusAndCollegeVisibility();
    });

    // Toggle college dropdown visibility based on campus selection
    campusDropdown.addEventListener("change", function () {
        if (campusDropdown.value !== "Sta. Mesa (MAIN CAMPUS)") {
            collegeDropdownContainer.style.display = "none";
        } else {
            collegeDropdownContainer.style.display = "block";
        }
    });

    // Initial check to ensure campus and college visibility is correct on page load
    toggleCampusAndCollegeVisibility();
});
</script>
