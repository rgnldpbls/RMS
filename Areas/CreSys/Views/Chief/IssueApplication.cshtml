@model ResearchManagementSystem.Areas.CreSys.ViewModels.EvaluationDetailsViewModel

@{
    var successMessage = TempData["SuccessMessage"] as string;
    ViewData["Title"] = "Application Issuance";
}

<head>
    <link rel="stylesheet" href="~/css/DetailsInitialReview.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css" asp-append-version="true" />
</head>

<!-- Success Modal -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <script>
        // Trigger modal on page load
        $(document).ready(function () {
            $('#successModal').modal('show');
        });
    </script>

    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="successModalLabel">Success</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @successMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
}
<div class="header-container">
    <h2 class="title">Evaluation Details</h2>
    <button class="btn-back" onclick="goBack()">Back</button>
</div>

<div class="container">

    <div class="card border-light mb-3" style="width: contain">
        <div class="card-header">
            <div class="row">
                <div class="col text-start">
                    <p id="urecNoText">
                        <strong>UREC No.: </strong> @Model.EthicsApplication.UrecNo
                    </p>
                    <button id="copybut" type="button" class="btn-outline-transparent btn-sm ms-2" onclick="copyUrecNo()">
                        <i class="fas fa-copy"></i>
                    </button>

                    <h4><strong>Research Title:</strong> @Model.NonFundedResearchInfo.Title</h4>
                    <p>
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Proponent:</strong>
                                @Model.NonFundedResearchInfo.Name
                                <ul>
                                    @if (Model.NonFundedResearchInfo.CoProponents != null && Model.NonFundedResearchInfo.CoProponents.Any())
                                    {
                                        foreach (var proponent in Model.NonFundedResearchInfo.CoProponents)
                                        {
                                            <li>@proponent.CoProponentName</li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </p>
                    <p><strong>Field of Study:</strong> @Model.EthicsApplication.FieldOfStudy</p>
                    <p><strong>College: </strong> @Model.NonFundedResearchInfo.College</p>
                </div>

                <div class="col text-end">
                    <p id="dtsNoText">
                        <strong>DTS No.:</strong>
                    </p>

                    @if (!string.IsNullOrEmpty(Model.EthicsApplication.DtsNo))
                    {
                        <button id="copybut" type="button" class="btn-outline-transparent btn-sm ms-2" onclick="copyDtsNo()">
                            <i class="fas fa-copy"></i>
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="card-body">
            <h4 class="text-center">Evaluation Sheets</h4>
            @if (Model.EthicsApplication.EthicsEvaluation != null && Model.EthicsApplication.EthicsEvaluation.Any())
            {
                @foreach (var evaluation in Model.EthicsApplication.EthicsEvaluation)
                {
                    <h5 class="text-center">Evaluation ID: @evaluation.EvaluationId</h5>
                    <table class="table table-bordered">
                        <thead class="bg-danger text-white">
                            <tr>
                                <th>Evaluation Sheet</th>
                                <th>Comments/Suggestions</th>
                                <th>Recommendation</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <button id="viewBut" type="button" class=""
                                            onclick="openPdfInNewTab('ProtocolReviewSheet', '@Model.EthicsApplication.UrecNo', @evaluation.EvaluationId)">
                                        View Protocol Review Sheet
                                    </button>
                                </td>
                                <td>
                                    @evaluation.ProtocolRemarks
                                </td>
                                <td>
                                    @evaluation.ProtocolRecommendation
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <button id="viewBut" type="button" class=""
                                            onclick="openPdfInNewTab('InformedConsentForm', '@Model.EthicsApplication.UrecNo', @evaluation.EvaluationId)">
                                        View Informed Consent Form
                                    </button>
                                </td>
                                <td>
                                    @evaluation.ConsentRemarks
                                </td>
                                <td>
                                    @evaluation.ConsentRecommendation
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            }
            else
            {
                <p>No evaluations available for this application.</p>
            }
        </div>
        <script>
            function openPdfInNewTab(fileType, urecNo, evaluationId) {
                // Construct the URL for the ViewEvaluationSheet action
                const url = @Url.Action("ViewEvaluationSheet", "Chief")? fileType = ${ fileType }& urecNo=${ urecNo }& evaluationId=${ evaluationId };

                // Open the URL in a new tab
                window.open(url, '_blank');
            }
        </script>

        <div class="form-container">
            <form id="issueApplicationForm" asp-action="IssueApplication" asp-controller="Chief" enctype="multipart/form-data" method="post">
                <!-- Hidden field for UREC No. -->
                <input type="hidden" id="urecNo" name="urecNo" value="@Model.EthicsApplication.UrecNo" />
                <input type="hidden" id="decisionValue" name="applicationDecision" />

                <!-- Display clearance status -->
                @if (Model.EthicsClearance != null)
                {
                    <span class="mb-3 badge bg-success">Clearance Issued</span>
                    <br />
                    <!-- Button to view clearance -->
                    <button id="viewBut" type="button" onclick="viewEthicsClearance('@Model.EthicsApplication.UrecNo')">
                        View Ethics Clearance
                    </button>
                }

                else if (Model.EthicsEvaluation.All(e => e.EvaluationStatus == "Evaluated"))
                {
                    <!-- Fetch the latest log to check for revisions -->
                    var latestLog = Model.EthicsApplication.EthicsApplicationLogs.OrderByDescending(log => log.ChangeDate).FirstOrDefault();

                    <!-- Check if the latest log status is "Minor Revisions" or "Major Revisions" -->
                    if (latestLog != null && (latestLog.Status == "Minor Revisions" || latestLog.Status == "Major Revisions"))
                    {
                        <!-- Display the "Awaiting Amendment" badge and hide other inputs -->
                        <span class="badge bg-warning">Awaiting Amendment</span>
                        <br />

                        <!-- Hide all form elements for decision, remarks, and file upload -->
                        <style>
                            #applicationDecision, #remarks, #uploadedFile, #formSubmitButton, #returnForAmendmentButton {
                                display: none;
                            }
                        </style>
                    }
                    else
                    {
                        <!-- Display the form inputs normally -->
                        var form15Exists = Model.EthicsApplication.EthicsApplicationForms.Any(f => f.EthicsFormId == "FORM15");

                        <!-- If Form 15 exists, show the view button -->
                        @if (form15Exists)
                        {
                            <a href="@Url.Action("ViewFile", "Researcher", new { formId = "FORM15", UrecNo = Model.EthicsApplication.UrecNo })" target="_blank" class="btn btn-danger">
                                View Form 15
                            </a>

                            <!-- Display the decision dropdown and remarks as usual -->
                            <div class="form-group">
                                <label for="applicationDecision">Decision</label>
                                <select id="applicationDecision" name="applicationDecision" class="form-control" required onchange="toggleButtonsBasedOnDecision()">
                                    <option value="">Select Decision</option>
                                    <option value="Approve">Approve</option>
                                    <option value="Minor Revisions">Minor Revisions</option>
                                    <option value="Major Revisions">Major Revisions</option>
                                    <option value="Decline">Decline</option>
                                </select>
                            </div>

                            <!-- Remarks section, displaying concatenated comments from all evaluations -->
                            <div class="form-group">
                                <label for="remarks">Remarks for all Evaluations</label>
                                <small class="form-text text-muted">Enter all remarks for this evaluation</small>
                                <textarea id="remarks" name="remarks" class="form-control" rows="8">
                                    @foreach (var evaluation in Model.EthicsEvaluation)
                                    {
                                        if (!string.IsNullOrEmpty(evaluation.ProtocolRecommendation) && !string.IsNullOrEmpty(evaluation.ProtocolRemarks))
                                        {
                                            @Html.Raw("• " + evaluation.ProtocolRemarks + "\n")
                                        }
                                        if (!string.IsNullOrEmpty(evaluation.ConsentRecommendation) && !string.IsNullOrEmpty(evaluation.ConsentRemarks))
                                        {
                                            @Html.Raw("• " + evaluation.ConsentRemarks + "\n")
                                        }
                                    }
                                                </textarea>
                            </div>

                            <!-- File upload section for PDF, enabled only if 'Approve' is selected -->
                            <div class="form-group">
                                <label for="uploadedFile">Upload Ethics Application File (PDF only)</label>
                                <input type="file" class="form-control" id="uploadedFile" name="uploadedFile" accept="application/pdf" required disabled />
                                <small class="form-text text-muted">File upload is enabled only if the decision is "Approve".</small>
                            </div>
                        }
                        else
                        {
                            <!-- Display the decision dropdown and remarks as usual -->
                            <div class="form-group">
                                <label for="applicationDecision">Decision</label>
                                <select id="applicationDecision" name="applicationDecision" class="form-control" required onchange="toggleButtonsBasedOnDecision()">
                                    <option value="">Select Decision</option>
                                    <option value="Approve">Approve</option>
                                    <option value="Minor Revisions">Minor Revisions</option>
                                    <option value="Major Revisions">Major Revisions</option>
                                    <option value="Decline">Decline</option>
                                </select>
                            </div>

                            <!-- Remarks section, displaying concatenated comments from all evaluations -->
                            <div class="form-group">
                                <label for="remarks">Remarks for all Evaluations</label>
                                <small class="form-text text-muted">Enter all remarks for this evaluation</small>
                                <textarea id="remarks" name="remarks" class="form-control" rows="8">
                                    @foreach (var evaluation in Model.EthicsEvaluation)
                                    {
                                        if (!string.IsNullOrEmpty(evaluation.ProtocolRecommendation) && !string.IsNullOrEmpty(evaluation.ProtocolRemarks))
                                        {
                                            @Html.Raw("• " + evaluation.ProtocolRemarks + "\n")
                                        }
                                        if (!string.IsNullOrEmpty(evaluation.ConsentRecommendation) && !string.IsNullOrEmpty(evaluation.ConsentRemarks))
                                        {
                                            @Html.Raw("• " + evaluation.ConsentRemarks + "\n")
                                        }
                                    }
                                                            </textarea>
                            </div>

                            <!-- File upload section for PDF, enabled only if 'Approve' is selected -->
                            <div class="form-group">
                                <label for="uploadedFile">Upload Ethics Application File (PDF only)</label>
                                <input type="file" class="form-control" id="uploadedFile" name="uploadedFile" accept="application/pdf" required disabled />
                                <small class="form-text text-muted">File upload is enabled only if the decision is "Approve".</small>
                            </div>
                        }
                    }
                }
                else
                {
                    <span class="badge bg-danger">Evaluations Incomplete</span>
                }

                <!-- Only show these buttons if clearance is not issued -->
                @if (Model.EthicsClearance == null)
                {
                    <div class="mt-3">
                        <!-- Default button for 'Approve' decision and other statuses (initially hidden) -->
                        <button type="submit" id="formSubmitButton" class="btn btn-success" style="display: none;">Upload and Issue Clearance</button>

                        <!-- Button for 'Return for Amendment' when revisions are selected (initially hidden) -->
                        <button type="button" id="returnForAmendmentButton" class="btn btn-warning" style="display: none;" onclick="handleReturnForAmendment()">
                            Return for Amendment
                        </button>
                    </div>
                }
            </form>
        </div>

        <div class="modal fade" id="pdfModal" tabindex="-1" role="dialog" aria-labelledby="pdfModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-Title" id="pdfModalLabel">PDF Viewer</h5>
                        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <iframe id="pdfViewer" src="" width="100%" height="800px" frameborder="0"></iframe>
                    </div>
                </div>
            </div>
        </div>


        <script>
            function toggleButtonsBasedOnDecision() {
                const decision = document.getElementById('applicationDecision').value;
                const fileInput = document.getElementById('uploadedFile');
                const formSubmitButton = document.getElementById('formSubmitButton');
                const returnForAmendmentButton = document.getElementById('returnForAmendmentButton');

                if (decision === "Approve") {
                    fileInput.disabled = false;  // Enable file input
                    formSubmitButton.style.display = 'inline';  // Show form submit button
                    returnForAmendmentButton.style.display = 'none';  // Hide return for amendment button
                } else if (decision === "Minor Revisions" || decision === "Major Revisions") {
                    fileInput.disabled = true;  // Disable file input
                    formSubmitButton.style.display = 'none';  // Hide form submit button
                    returnForAmendmentButton.style.display = 'inline';  // Show return for amendment button
                } else {
                    fileInput.disabled = true;  // Disable file input
                    formSubmitButton.style.display = 'none';  // Hide form submit button
                    returnForAmendmentButton.style.display = 'none';  // Hide return for amendment button
                }
            }
        </script>

    </div>
</div>
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script>
        // Function to copy UREC No. to clipboard
        function copyUrecNo() {
            const urecNoText = document.getElementById("urecNoValue").innerText;
            navigator.clipboard.writeText(urecNoText).then(function () {
                alert('UREC No. copied to clipboard!');
            }).catch(function (err) {
                console.error('Could not copy text: ', err);
            });
        }

        // Function to copy DTS No. to clipboard
        function copyDtsNo() {
            const dtsNoText = document.getElementById("dtsNoValue").innerText;
            navigator.clipboard.writeText(dtsNoText).then(function () {
                alert('DTS No. copied to clipboard!');
            }).catch(function (err) {
                console.error('Could not copy text: ', err);
            });
        }

        function viewEthicsClearance(urecNo) {
            var pdfUrl = '@Url.Action("ViewClearanceFile", "Researcher")' + '?urecNo=' + encodeURIComponent(urecNo);
            window.open(pdfUrl, '_blank'); // Open in a new tab
        }


        function openPdfInModal(pdfUrl) {
            document.getElementById("pdfViewer").src = pdfUrl;
            $('#pdfModal').modal('show');
        }
        document.addEventListener('DOMContentLoaded', function () {
            const applicationDecision = document.getElementById('applicationDecision');
            const formSubmitButton = document.getElementById('formSubmitButton');
            const issueApplicationForm = document.getElementById('issueApplicationForm');
            const decisionValue = document.getElementById('decisionValue');

            // When the decision dropdown changes, update the hidden input with the selected value
            if (applicationDecision) {
                applicationDecision.addEventListener('change', function () {
                    // Set the value of the hidden field to the selected decision
                    decisionValue.value = this.value;

                    // Control visibility of the submit button based on decision
                    if (this.value === 'Approve') {
                        formSubmitButton.style.display = 'inline-block'; // Show button for "Approve"
                    } else if (this.value === 'Minor Revisions' || this.value === 'Major Revisions') {
                        formSubmitButton.style.display = 'none'; // Hide button for revisions
                    } else {
                        formSubmitButton.style.display = 'none'; // Hide button for other decisions
                    }
                });
            }



            // Add a confirmation prompt on form submission
            issueApplicationForm.addEventListener('submit', function (event) {
                let decision = applicationDecision ? applicationDecision.value : '';
                let confirmationMessage = '';

                if (decision === 'Approve') {
                    confirmationMessage = "Are you sure you want to upload and issue the clearance?";
                } else if (decision === 'Disapprove') {
                    confirmationMessage = "Are you sure you want to disapprove this application?";
                }

                // Only show the confirmation if there’s a specific decision
                if (confirmationMessage && !confirm(confirmationMessage)) {
                    event.preventDefault(); // Prevent form submission if user cancels
                }

                // Ensure decision is set before submitting
                if (!decisionValue.value) {
                    alert("Please select a decision.");
                    event.preventDefault(); // Prevent form submission if no decision is selected
                }
            });
        });


        function handleReturnForAmendment() {
            // Show confirmation dialog before proceeding
            var confirmed = confirm("Are you sure you want to return this application for amendment?");

            if (confirmed) {
                // Set the decision to "Return for Amendment" before submitting the form
                document.getElementById('applicationDecision').value = "Return for Amendment";
                // Submit the form
                document.getElementById('issueApplicationForm').submit();
            } else {
                // If user cancels, do nothing (form will not be submitted)
                return false;
            }
        }
        function goBack() {
            window.history.back();
        }

    </script>
}